// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: actioncontroller.proto

package proto

import (
	context "context"
	proto "github.com/je4/genericproto/v2/pkg/generic/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActionController_Ping_FullMethodName      = "/mediaserveractionproto.ActionController/Ping"
	ActionController_GetParams_FullMethodName = "/mediaserveractionproto.ActionController/GetParams"
	ActionController_Action_FullMethodName    = "/mediaserveractionproto.ActionController/Action"
)

// ActionControllerClient is the client API for ActionController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionControllerClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	GetParams(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.StringList, error)
	Action(ctx context.Context, in *ActionParam, opts ...grpc.CallOption) (*ActionResponse, error)
}

type actionControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewActionControllerClient(cc grpc.ClientConnInterface) ActionControllerClient {
	return &actionControllerClient{cc}
}

func (c *actionControllerClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, ActionController_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionControllerClient) GetParams(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.StringList, error) {
	out := new(proto.StringList)
	err := c.cc.Invoke(ctx, ActionController_GetParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionControllerClient) Action(ctx context.Context, in *ActionParam, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, ActionController_Action_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionControllerServer is the server API for ActionController service.
// All implementations must embed UnimplementedActionControllerServer
// for forward compatibility
type ActionControllerServer interface {
	Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error)
	GetParams(context.Context, *emptypb.Empty) (*proto.StringList, error)
	Action(context.Context, *ActionParam) (*ActionResponse, error)
	mustEmbedUnimplementedActionControllerServer()
}

// UnimplementedActionControllerServer must be embedded to have forward compatible implementations.
type UnimplementedActionControllerServer struct {
}

func (UnimplementedActionControllerServer) Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedActionControllerServer) GetParams(context.Context, *emptypb.Empty) (*proto.StringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (UnimplementedActionControllerServer) Action(context.Context, *ActionParam) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedActionControllerServer) mustEmbedUnimplementedActionControllerServer() {}

// UnsafeActionControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionControllerServer will
// result in compilation errors.
type UnsafeActionControllerServer interface {
	mustEmbedUnimplementedActionControllerServer()
}

func RegisterActionControllerServer(s grpc.ServiceRegistrar, srv ActionControllerServer) {
	s.RegisterService(&ActionController_ServiceDesc, srv)
}

func _ActionController_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionControllerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionController_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionControllerServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionController_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionControllerServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionController_GetParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionControllerServer).GetParams(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionController_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionControllerServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionController_Action_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionControllerServer).Action(ctx, req.(*ActionParam))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionController_ServiceDesc is the grpc.ServiceDesc for ActionController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaserveractionproto.ActionController",
	HandlerType: (*ActionControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ActionController_Ping_Handler,
		},
		{
			MethodName: "GetParams",
			Handler:    _ActionController_GetParams_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _ActionController_Action_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "actioncontroller.proto",
}
