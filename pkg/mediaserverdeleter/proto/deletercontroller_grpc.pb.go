// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: deletercontroller.proto

package proto

import (
	context "context"
	proto "github.com/je4/genericproto/v2/pkg/generic/proto"
	proto1 "github.com/je4/mediaserverproto/v2/pkg/mediaserverdb/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeleterController_Ping_FullMethodName             = "/mediaserverdeleterproto.DeleterController/Ping"
	DeleterController_DeleteItem_FullMethodName       = "/mediaserverdeleterproto.DeleterController/DeleteItem"
	DeleterController_DeleteItemCaches_FullMethodName = "/mediaserverdeleterproto.DeleterController/DeleteItemCaches"
	DeleterController_DeleteCache_FullMethodName      = "/mediaserverdeleterproto.DeleterController/DeleteCache"
)

// DeleterControllerClient is the client API for DeleterController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleterControllerClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	DeleteItem(ctx context.Context, in *proto1.ItemIdentifier, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	DeleteItemCaches(ctx context.Context, in *proto1.ItemIdentifier, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	DeleteCache(ctx context.Context, in *proto1.CacheRequest, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
}

type deleterControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleterControllerClient(cc grpc.ClientConnInterface) DeleterControllerClient {
	return &deleterControllerClient{cc}
}

func (c *deleterControllerClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, DeleterController_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deleterControllerClient) DeleteItem(ctx context.Context, in *proto1.ItemIdentifier, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, DeleterController_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deleterControllerClient) DeleteItemCaches(ctx context.Context, in *proto1.ItemIdentifier, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, DeleterController_DeleteItemCaches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deleterControllerClient) DeleteCache(ctx context.Context, in *proto1.CacheRequest, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, DeleterController_DeleteCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleterControllerServer is the server API for DeleterController service.
// All implementations must embed UnimplementedDeleterControllerServer
// for forward compatibility
type DeleterControllerServer interface {
	Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error)
	DeleteItem(context.Context, *proto1.ItemIdentifier) (*proto.DefaultResponse, error)
	DeleteItemCaches(context.Context, *proto1.ItemIdentifier) (*proto.DefaultResponse, error)
	DeleteCache(context.Context, *proto1.CacheRequest) (*proto.DefaultResponse, error)
	mustEmbedUnimplementedDeleterControllerServer()
}

// UnimplementedDeleterControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDeleterControllerServer struct {
}

func (UnimplementedDeleterControllerServer) Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDeleterControllerServer) DeleteItem(context.Context, *proto1.ItemIdentifier) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedDeleterControllerServer) DeleteItemCaches(context.Context, *proto1.ItemIdentifier) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemCaches not implemented")
}
func (UnimplementedDeleterControllerServer) DeleteCache(context.Context, *proto1.CacheRequest) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCache not implemented")
}
func (UnimplementedDeleterControllerServer) mustEmbedUnimplementedDeleterControllerServer() {}

// UnsafeDeleterControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleterControllerServer will
// result in compilation errors.
type UnsafeDeleterControllerServer interface {
	mustEmbedUnimplementedDeleterControllerServer()
}

func RegisterDeleterControllerServer(s grpc.ServiceRegistrar, srv DeleterControllerServer) {
	s.RegisterService(&DeleterController_ServiceDesc, srv)
}

func _DeleterController_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleterControllerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleterController_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleterControllerServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeleterController_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.ItemIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleterControllerServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleterController_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleterControllerServer).DeleteItem(ctx, req.(*proto1.ItemIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeleterController_DeleteItemCaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.ItemIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleterControllerServer).DeleteItemCaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleterController_DeleteItemCaches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleterControllerServer).DeleteItemCaches(ctx, req.(*proto1.ItemIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeleterController_DeleteCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleterControllerServer).DeleteCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleterController_DeleteCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleterControllerServer).DeleteCache(ctx, req.(*proto1.CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleterController_ServiceDesc is the grpc.ServiceDesc for DeleterController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleterController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaserverdeleterproto.DeleterController",
	HandlerType: (*DeleterControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DeleterController_Ping_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _DeleterController_DeleteItem_Handler,
		},
		{
			MethodName: "DeleteItemCaches",
			Handler:    _DeleterController_DeleteItemCaches_Handler,
		},
		{
			MethodName: "DeleteCache",
			Handler:    _DeleterController_DeleteCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deletercontroller.proto",
}
