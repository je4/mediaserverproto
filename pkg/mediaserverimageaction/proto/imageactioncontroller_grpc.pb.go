// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: imageactioncontroller.proto

package proto

import (
	context "context"
	proto "github.com/je4/mediaserverproto/v2/pkg/mediaservergeneric/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageActionController_Ping_FullMethodName = "/mediaserverimageactionproto.ImageActionController/Ping"
)

// ImageActionControllerClient is the client API for ImageActionController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageActionControllerClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
}

type imageActionControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewImageActionControllerClient(cc grpc.ClientConnInterface) ImageActionControllerClient {
	return &imageActionControllerClient{cc}
}

func (c *imageActionControllerClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, ImageActionController_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageActionControllerServer is the server API for ImageActionController service.
// All implementations must embed UnimplementedImageActionControllerServer
// for forward compatibility
type ImageActionControllerServer interface {
	Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error)
	mustEmbedUnimplementedImageActionControllerServer()
}

// UnimplementedImageActionControllerServer must be embedded to have forward compatible implementations.
type UnimplementedImageActionControllerServer struct {
}

func (UnimplementedImageActionControllerServer) Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedImageActionControllerServer) mustEmbedUnimplementedImageActionControllerServer() {}

// UnsafeImageActionControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageActionControllerServer will
// result in compilation errors.
type UnsafeImageActionControllerServer interface {
	mustEmbedUnimplementedImageActionControllerServer()
}

func RegisterImageActionControllerServer(s grpc.ServiceRegistrar, srv ImageActionControllerServer) {
	s.RegisterService(&ImageActionController_ServiceDesc, srv)
}

func _ImageActionController_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageActionControllerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageActionController_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageActionControllerServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageActionController_ServiceDesc is the grpc.ServiceDesc for ImageActionController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageActionController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaserverimageactionproto.ImageActionController",
	HandlerType: (*ImageActionControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ImageActionController_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "imageactioncontroller.proto",
}
