// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: rpcDeleter.proto

package proto

import (
	context "context"
	proto "github.com/je4/genericproto/v2/pkg/generic/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Deleter_Ping_FullMethodName             = "/mediaserverproto.Deleter/Ping"
	Deleter_DeleteItem_FullMethodName       = "/mediaserverproto.Deleter/DeleteItem"
	Deleter_DeleteItemCaches_FullMethodName = "/mediaserverproto.Deleter/DeleteItemCaches"
	Deleter_DeleteCache_FullMethodName      = "/mediaserverproto.Deleter/DeleteCache"
)

// DeleterClient is the client API for Deleter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleterClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	DeleteItem(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	DeleteItemCaches(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	DeleteCache(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
}

type deleterClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleterClient(cc grpc.ClientConnInterface) DeleterClient {
	return &deleterClient{cc}
}

func (c *deleterClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, Deleter_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deleterClient) DeleteItem(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, Deleter_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deleterClient) DeleteItemCaches(ctx context.Context, in *ItemIdentifier, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, Deleter_DeleteItemCaches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deleterClient) DeleteCache(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, Deleter_DeleteCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleterServer is the server API for Deleter service.
// All implementations must embed UnimplementedDeleterServer
// for forward compatibility
type DeleterServer interface {
	Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error)
	DeleteItem(context.Context, *ItemIdentifier) (*proto.DefaultResponse, error)
	DeleteItemCaches(context.Context, *ItemIdentifier) (*proto.DefaultResponse, error)
	DeleteCache(context.Context, *CacheRequest) (*proto.DefaultResponse, error)
	mustEmbedUnimplementedDeleterServer()
}

// UnimplementedDeleterServer must be embedded to have forward compatible implementations.
type UnimplementedDeleterServer struct {
}

func (UnimplementedDeleterServer) Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDeleterServer) DeleteItem(context.Context, *ItemIdentifier) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedDeleterServer) DeleteItemCaches(context.Context, *ItemIdentifier) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemCaches not implemented")
}
func (UnimplementedDeleterServer) DeleteCache(context.Context, *CacheRequest) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCache not implemented")
}
func (UnimplementedDeleterServer) mustEmbedUnimplementedDeleterServer() {}

// UnsafeDeleterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleterServer will
// result in compilation errors.
type UnsafeDeleterServer interface {
	mustEmbedUnimplementedDeleterServer()
}

func RegisterDeleterServer(s grpc.ServiceRegistrar, srv DeleterServer) {
	s.RegisterService(&Deleter_ServiceDesc, srv)
}

func _Deleter_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deleter_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleterServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deleter_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleterServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deleter_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleterServer).DeleteItem(ctx, req.(*ItemIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deleter_DeleteItemCaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleterServer).DeleteItemCaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deleter_DeleteItemCaches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleterServer).DeleteItemCaches(ctx, req.(*ItemIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deleter_DeleteCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleterServer).DeleteCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deleter_DeleteCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleterServer).DeleteCache(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deleter_ServiceDesc is the grpc.ServiceDesc for Deleter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deleter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaserverproto.Deleter",
	HandlerType: (*DeleterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Deleter_Ping_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _Deleter_DeleteItem_Handler,
		},
		{
			MethodName: "DeleteItemCaches",
			Handler:    _Deleter_DeleteItemCaches_Handler,
		},
		{
			MethodName: "DeleteCache",
			Handler:    _Deleter_DeleteCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcDeleter.proto",
}
