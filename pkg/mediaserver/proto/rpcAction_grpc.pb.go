// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: rpcAction.proto

package proto

import (
	context "context"
	proto "github.com/je4/genericproto/v2/pkg/generic/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Action_Ping_FullMethodName      = "/mediaserverproto.Action/Ping"
	Action_GetParams_FullMethodName = "/mediaserverproto.Action/GetParams"
	Action_Action_FullMethodName    = "/mediaserverproto.Action/Action"
)

// ActionClient is the client API for Action service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	GetParams(ctx context.Context, in *ParamsParam, opts ...grpc.CallOption) (*ActionParamResponse, error)
	Action(ctx context.Context, in *ActionParam, opts ...grpc.CallOption) (*Cache, error)
}

type actionClient struct {
	cc grpc.ClientConnInterface
}

func NewActionClient(cc grpc.ClientConnInterface) ActionClient {
	return &actionClient{cc}
}

func (c *actionClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, Action_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionClient) GetParams(ctx context.Context, in *ParamsParam, opts ...grpc.CallOption) (*ActionParamResponse, error) {
	out := new(ActionParamResponse)
	err := c.cc.Invoke(ctx, Action_GetParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionClient) Action(ctx context.Context, in *ActionParam, opts ...grpc.CallOption) (*Cache, error) {
	out := new(Cache)
	err := c.cc.Invoke(ctx, Action_Action_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServer is the server API for Action service.
// All implementations must embed UnimplementedActionServer
// for forward compatibility
type ActionServer interface {
	Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error)
	GetParams(context.Context, *ParamsParam) (*ActionParamResponse, error)
	Action(context.Context, *ActionParam) (*Cache, error)
	mustEmbedUnimplementedActionServer()
}

// UnimplementedActionServer must be embedded to have forward compatible implementations.
type UnimplementedActionServer struct {
}

func (UnimplementedActionServer) Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedActionServer) GetParams(context.Context, *ParamsParam) (*ActionParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParams not implemented")
}
func (UnimplementedActionServer) Action(context.Context, *ActionParam) (*Cache, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedActionServer) mustEmbedUnimplementedActionServer() {}

// UnsafeActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionServer will
// result in compilation errors.
type UnsafeActionServer interface {
	mustEmbedUnimplementedActionServer()
}

func RegisterActionServer(s grpc.ServiceRegistrar, srv ActionServer) {
	s.RegisterService(&Action_ServiceDesc, srv)
}

func _Action_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Action_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Action_GetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServer).GetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Action_GetParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServer).GetParams(ctx, req.(*ParamsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Action_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Action_Action_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServer).Action(ctx, req.(*ActionParam))
	}
	return interceptor(ctx, in, info, handler)
}

// Action_ServiceDesc is the grpc.ServiceDesc for Action service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Action_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaserverproto.Action",
	HandlerType: (*ActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Action_Ping_Handler,
		},
		{
			MethodName: "GetParams",
			Handler:    _Action_GetParams_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _Action_Action_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcAction.proto",
}

const (
	ActionDispatcher_Ping_FullMethodName             = "/mediaserverproto.ActionDispatcher/Ping"
	ActionDispatcher_AddController_FullMethodName    = "/mediaserverproto.ActionDispatcher/AddController"
	ActionDispatcher_RemoveController_FullMethodName = "/mediaserverproto.ActionDispatcher/RemoveController"
	ActionDispatcher_GetActions_FullMethodName       = "/mediaserverproto.ActionDispatcher/GetActions"
)

// ActionDispatcherClient is the client API for ActionDispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionDispatcherClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	AddController(ctx context.Context, in *ActionDispatcherParam, opts ...grpc.CallOption) (*ActionDispatcherDefaultResponse, error)
	RemoveController(ctx context.Context, in *ActionDispatcherParam, opts ...grpc.CallOption) (*proto.DefaultResponse, error)
	GetActions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActionMap, error)
}

type actionDispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewActionDispatcherClient(cc grpc.ClientConnInterface) ActionDispatcherClient {
	return &actionDispatcherClient{cc}
}

func (c *actionDispatcherClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, ActionDispatcher_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionDispatcherClient) AddController(ctx context.Context, in *ActionDispatcherParam, opts ...grpc.CallOption) (*ActionDispatcherDefaultResponse, error) {
	out := new(ActionDispatcherDefaultResponse)
	err := c.cc.Invoke(ctx, ActionDispatcher_AddController_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionDispatcherClient) RemoveController(ctx context.Context, in *ActionDispatcherParam, opts ...grpc.CallOption) (*proto.DefaultResponse, error) {
	out := new(proto.DefaultResponse)
	err := c.cc.Invoke(ctx, ActionDispatcher_RemoveController_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionDispatcherClient) GetActions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActionMap, error) {
	out := new(ActionMap)
	err := c.cc.Invoke(ctx, ActionDispatcher_GetActions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionDispatcherServer is the server API for ActionDispatcher service.
// All implementations must embed UnimplementedActionDispatcherServer
// for forward compatibility
type ActionDispatcherServer interface {
	Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error)
	AddController(context.Context, *ActionDispatcherParam) (*ActionDispatcherDefaultResponse, error)
	RemoveController(context.Context, *ActionDispatcherParam) (*proto.DefaultResponse, error)
	GetActions(context.Context, *emptypb.Empty) (*ActionMap, error)
	mustEmbedUnimplementedActionDispatcherServer()
}

// UnimplementedActionDispatcherServer must be embedded to have forward compatible implementations.
type UnimplementedActionDispatcherServer struct {
}

func (UnimplementedActionDispatcherServer) Ping(context.Context, *emptypb.Empty) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedActionDispatcherServer) AddController(context.Context, *ActionDispatcherParam) (*ActionDispatcherDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddController not implemented")
}
func (UnimplementedActionDispatcherServer) RemoveController(context.Context, *ActionDispatcherParam) (*proto.DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveController not implemented")
}
func (UnimplementedActionDispatcherServer) GetActions(context.Context, *emptypb.Empty) (*ActionMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActions not implemented")
}
func (UnimplementedActionDispatcherServer) mustEmbedUnimplementedActionDispatcherServer() {}

// UnsafeActionDispatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionDispatcherServer will
// result in compilation errors.
type UnsafeActionDispatcherServer interface {
	mustEmbedUnimplementedActionDispatcherServer()
}

func RegisterActionDispatcherServer(s grpc.ServiceRegistrar, srv ActionDispatcherServer) {
	s.RegisterService(&ActionDispatcher_ServiceDesc, srv)
}

func _ActionDispatcher_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionDispatcherServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionDispatcher_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionDispatcherServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionDispatcher_AddController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionDispatcherParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionDispatcherServer).AddController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionDispatcher_AddController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionDispatcherServer).AddController(ctx, req.(*ActionDispatcherParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionDispatcher_RemoveController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionDispatcherParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionDispatcherServer).RemoveController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionDispatcher_RemoveController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionDispatcherServer).RemoveController(ctx, req.(*ActionDispatcherParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionDispatcher_GetActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionDispatcherServer).GetActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionDispatcher_GetActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionDispatcherServer).GetActions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionDispatcher_ServiceDesc is the grpc.ServiceDesc for ActionDispatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionDispatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaserverproto.ActionDispatcher",
	HandlerType: (*ActionDispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ActionDispatcher_Ping_Handler,
		},
		{
			MethodName: "AddController",
			Handler:    _ActionDispatcher_AddController_Handler,
		},
		{
			MethodName: "RemoveController",
			Handler:    _ActionDispatcher_RemoveController_Handler,
		},
		{
			MethodName: "GetActions",
			Handler:    _ActionDispatcher_GetActions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcAction.proto",
}
